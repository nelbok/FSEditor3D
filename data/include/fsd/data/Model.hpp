/*
 * Copyright (c) 2024 Foxxy Soft.
 *
 * The license and distribution terms for this file may be
 * found in the file LICENSE in this distribution
 */

#pragma once

#include <fsd/data/FSDataExport.h>

#include <QtCore/QUrl>

#include <fsd/data/Geometry.hpp>

namespace fsd {
/**
 * @brief An entity to store a 3D model.
 *
 * Global geometry represents the entity transform in relation to the project transform.\n
 * With the editor, <a href="https://doc.qt.io/qt-6/qtquick3d-tool-balsam.html">Balsam Asset Import Tool</a> is used to import 3D models.
 */
class FSDATA_EXPORT Model final : public Geometry {
	Q_OBJECT
	/**
	 * @brief The source file used with Balsam.
	 */
	Q_PROPERTY(QUrl sourcePath READ sourcePath WRITE setSourcePath NOTIFY sourcePathUpdated)
	/**
	 * @brief The name of the QML file generated by Balsam.
	 */
	Q_PROPERTY(QString qmlName READ qmlName WRITE setQmlName NOTIFY qmlNameUpdated)
	/**
	 * @brief For which type of entity, the model is used.
	 */
	Q_PROPERTY(ModelType modelType READ modelType WRITE setModelType NOTIFY modelTypeUpdated)

public:
	/**
	 * @brief For which type of entity, the model is used.
	 */
	enum class ModelType {
		Link,
		Object,
		Place,
	};
	Q_ENUM(ModelType)

	explicit Model(Project* project);
	~Model() override;

	void reset() override;
	void copy(const Model& model);

	QUrl sourcePath() const;
	void setSourcePath(const QUrl& path);

	QString qmlName() const;
	void setQmlName(const QString& path);

	ModelType modelType() const;
	void setModelType(ModelType type);

	Type type() const override;
	QVector3D globalPosition() const override;
	QVector3D globalRotation() const override;
	QVector3D globalScale() const override;

	void load(const QJsonObject& json) override;
	void save(QJsonObject& json) const override;

private:
	using Geometry::copy;

	struct Impl;
	std::unique_ptr<Impl> _impl;

signals:
	void sourcePathUpdated();
	void qmlNameUpdated();
	void modelTypeUpdated();
};
} // namespace fsd
